// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String
  role     String @default("STUDENT")

  // Relasi ke Student jika role adalah STUDENT
  student Student?
  processLogs StudentProcessLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Student {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Data Pribadi
  fullName      String
  birthPlace    String
  birthDate     DateTime
  gender        String
  religion      String
  nationality   String   @default("Indonesia")
  address       String
  rt            String?
  rw            String?
  village       String?
  district      String
  city          String
  province      String
  postalCode    String
  phoneNumber   String?
  email         String?
  childOrder    Int      @default(1)
  totalSiblings Int      @default(1)
  height        Float?   @default(0)
  weight        Float?   @default(0)
  medicalHistory String?

  // Data Orang Tua/Wali
  fatherName       String
  fatherJob        String?
  fatherEducation  String?
  motherName       String
  motherJob        String?
  motherEducation  String?
  guardianName     String?
  guardianJob      String?
  parentPhone      String?
  parentAddress    String?

  // Data Pendidikan
  schoolName       String
  npsn             String?
  nisn             String? @unique
  graduationYear   Int
  certificateNumber String?

  // Pilihan Jurusan
  selectedMajor    String

  // Status Dokumen (tetap untuk tracking upload)
  hasIjazah     Boolean @default(false)
  hasSKHUN      Boolean @default(false)
  hasKK         Boolean @default(false)
  hasAktaLahir  Boolean @default(false)
  hasFoto       Boolean @default(false)
  hasRaport     Boolean @default(false)
  hasSertifikat Boolean @default(false)

  // Status Penerimaan Sederhana
  finalStatus   String    @default("PENDING") // PENDING, APPROVED, REJECTED, WAITLIST
  adminNotes    String?   @db.Text
  processedAt   DateTime?
  processedBy   String?

  // Relasi ke Ranking dan Process Log
  ranking Ranking?
  processLogs StudentProcessLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Ranking {
  id        String  @id @default(cuid())
  studentId String  @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Nilai Akademik
  mathScore       Float @default(0)
  indonesianScore Float @default(0)
  englishScore    Float @default(0)
  scienceScore    Float @default(0)

  // Prestasi dan Sertifikat
  academicAchievement    String @default("none")
  nonAcademicAchievement String @default("none")
  certificateScore       String @default("none")
  accreditation          String @default("Belum Terakreditasi")

  // Total dan Ranking
  totalScore Float @default(0)
  rank       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rankings")
}

model StudentProcessLog {
  id          String   @id @default(cuid())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  action      String   // ACCEPT, REJECT
  reason      String?  @db.Text
  processedBy String
  processor   User     @relation(fields: [processedBy], references: [id])
  createdAt   DateTime @default(now())

  @@map("student_process_logs")
}

model Quota {
  id        String @id @default(cuid())
  majorCode String @unique
  majorName String
  quota     Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotas")
}

// Enum values as constants
// Role: ADMIN, STUDENT
// Gender: MALE, FEMALE  
// RegistrationStatus: PENDING, APPROVED, REJECTED, COMPLETED
// DocumentStatus: PENDING, VERIFIED, REJECTED, REVISION_REQUESTED
